sourceSets {
    test {
        groovy.srcDir "src/test/unit/groovy"
        resources.srcDir "src/test/unit/resources"

        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }

    integrationTest {
        groovy.srcDir "src/test/integration/groovy"
        resources.srcDir "src/test/integration/resources"

        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }

    functionalTest {
        groovy.srcDir "src/test/functional/groovy"
        resources.srcDir "src/test/functional/resources" as String
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

//provide dependency scopes
configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
    functionalTestImplementation.extendsFrom testImplementation
    functionalTestRuntime.extendsFrom testRuntime
    performanceTestImplementation.extendsFrom testImplementation
    performanceRuntime.extendsFrom testRuntime
    oracleTestImplementation.extendsFrom testImplementation
    oracleRuntime.extendsFrom testRuntime
}

compileTestJava {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

dependencies {
    implementation("org.apache.groovy:groovy:${groovyVersion}")
    testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    testImplementation("org.spockframework:spock-core:${spockVersion}")
    testImplementation("org.spockframework:spock-spring:${spockVersion}")
    testImplementation("org.testcontainers:spock:${testContainersVersion}")
    testImplementation("io.github.http-builder-ng:http-builder-ng-core:${httpBuilderVersion}")
    testImplementation("com.squareup.retrofit2:retrofit:${retrofitVersion}")
    testImplementation("com.squareup.retrofit2:retrofit-mock:${retrofitVersion}")
    //h2 database
    runtimeOnly("com.h2database:h2:${h2Version}")
}

test {
}


tasks.withType(Test) {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
}

task integrationTest(type: Test) {
    description = "Runs the integration tests."
    testClassesDirs = project.sourceSets.integrationTest.output.classesDirs
    classpath = project.sourceSets.integrationTest.runtimeClasspath
}

task functionalTest(type: Test) {
    description = "Runs the functional tests."
    testClassesDirs = project.sourceSets.functionalTest.output.classesDirs
    classpath = project.sourceSets.functionalTest.runtimeClasspath
}

integrationTest.reports.html.destination = file("$buildDir/reports/test/integration")
functionalTest.reports.html.destination = file("$buildDir/reports/test/functional")